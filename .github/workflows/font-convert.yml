name: Font Conversion with OTF Support

on:
  push:
    branches: [ main, master ]
    paths:
      - 'fonts/**'
      - '.github/workflows/font-convert.yml'
  workflow_dispatch:
    inputs:
      font_url:
        description: 'Font URL to download and convert'
        required: false
      font_path:
        description: 'Local font file path'
        required: false
        default: 'fonts/input/'
      output_formats:
        description: 'Output formats'
        required: true
        default: 'woff2,woff,ttf'
        type: choice
        options:
        - woff2,woff,ttf
        - woff2,woff
        - woff2,ttf
        - woff2
        - all

env:
  OUTPUT_DIR: fonts-output
  ARTIFACT_NAME: converted-fonts

jobs:
  convert-fonts:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python and tools
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y woff2 fontforge
        pip install fonttools brotli requests
        
    - name: Verify tools installation
      run: |
        echo "Checking installed tools..."
        woff2_compress --version || echo "woff2_compress installed"
        python -c "import fontTools; print(f'fonttools: {fontTools.__version__}')"
        python -c "import brotli; print(f'brotli: {brotli.__version__}')"

    - name: Create output directory
      run: mkdir -p $OUTPUT_DIR

    - name: Download font from URL
      if: github.event.inputs.font_url != ''
      id: download-font
      run: |
        FONT_URL="${{ github.event.inputs.font_url }}"
        FILENAME=$(basename "$FONT_URL" | sed 's/?.*$//')
        echo "Downloading font from: $FONT_URL"
        
        if curl -L -f -o "$OUTPUT_DIR/downloaded_font" "$FONT_URL"; then
          FILE_TYPE=$(file -b --mime-type "$OUTPUT_DIR/downloaded_font")
          echo "MIME type detected: $FILE_TYPE"
          
          case "$FILE_TYPE" in
            *opentype*|*sfnt*)
              EXTENSION="otf"
              ;;
            *truetype*)
              EXTENSION="ttf"
              ;;
            *woff2*)
              EXTENSION="woff2"
              ;;
            *woff*)
              EXTENSION="woff"
              ;;
            *)
              EXTENSION="${FILENAME##*.}"
              [ -z "$EXTENSION" ] || [ "$EXTENSION" = "$FILENAME" ] && EXTENSION="otf"
              ;;
          esac
          
          FONT_NAME=$(basename "$FILENAME" | sed 's/\.[^.]*$//')
          [ -z "$FONT_NAME" ] && FONT_NAME="imported_font"
          
          mv "$OUTPUT_DIR/downloaded_font" "$OUTPUT_DIR/${FONT_NAME}.${EXTENSION}"
          echo "downloaded_font_path=$OUTPUT_DIR/${FONT_NAME}.${EXTENSION}" >> $GITHUB_OUTPUT
          echo "font_name=$FONT_NAME" >> $GITHUB_OUTPUT
          echo "original_extension=$EXTENSION" >> $GITHUB_OUTPUT
          echo "✓ Downloaded as: $FONT_NAME.$EXTENSION"
        else
          echo "✗ Failed to download font from URL"
          exit 1
        fi

    - name: Find local font files
      if: github.event.inputs.font_url == '' || github.event.inputs.font_path != 'fonts/input/'
      id: find-local-fonts
      run: |
        SEARCH_PATH="${{ github.event.inputs.font_path }}"
        [ -z "$SEARCH_PATH" ] && SEARCH_PATH="fonts/"
        
        if [ -f "$SEARCH_PATH" ]; then
          echo "$SEARCH_PATH" > font_list.txt
        elif [ -d "$SEARCH_PATH" ]; then
          find "$SEARCH_PATH" -type f \( -iname "*.ttf" -o -iname "*.otf" -o -iname "*.woff" -o -iname "*.woff2" \) ! -path "*/$OUTPUT_DIR/*" > font_list.txt
        else
          touch font_list.txt
        fi
        
        FONT_COUNT=$(wc -l < font_list.txt | tr -d ' ')
        echo "font_count=$FONT_COUNT" >> $GITHUB_OUTPUT
        
        if [ "$FONT_COUNT" -gt 0 ]; then
          echo "Found $FONT_COUNT font file(s):"
          cat font_list.txt
        else
          echo "No font files found in $SEARCH_PATH"
        fi

    - name: Convert fonts with OTF support
      id: convert-fonts
      run: |
        python << 'PYTHON_SCRIPT'
        import os
        import json
        import subprocess
        from pathlib import Path
        from datetime import datetime
        
        OUTPUT_DIR = os.environ['OUTPUT_DIR']
        output_formats = "${{ github.event.inputs.output_formats }}"
        
        # Collect font files
        font_files = []
        
        downloaded_font = "${{ steps.download-font.outputs.downloaded_font_path }}"
        if downloaded_font and Path(downloaded_font).exists():
            font_files.append(downloaded_font)
            print(f"Added downloaded font: {downloaded_font}")
        
        if Path("font_list.txt").exists():
            with open("font_list.txt", "r") as f:
                for line in f:
                    font_path = line.strip()
                    if font_path and Path(font_path).exists():
                        font_files.append(font_path)
        
        if not font_files:
            print("No font files to convert")
            exit(0)
        
        print(f"\nProcessing {len(font_files)} font file(s)\n")
        
        # Initialize metadata
        metadata = {
            "conversion_date": datetime.now().isoformat(),
            "repository": "${{ github.repository }}",
            "run_id": "${{ github.run_id }}",
            "output_formats": output_formats,
            "fonts": []
        }
        
        conversion_stats = {"success": 0, "failed": 0, "formats": {}}
        
        for font_path in font_files:
            font_path_obj = Path(font_path)
            font_name = font_path_obj.stem
            original_ext = font_path_obj.suffix[1:].lower()
            
            print(f"Converting: {font_name} (.{original_ext})")
            
            font_info = {
                "name": font_name,
                "original_file": font_path_obj.name,
                "original_format": original_ext,
                "converted_formats": [],
                "css_file": f"{font_name}.css"
            }
            
            converted_formats = []
            css_sources = []
            
            try:
                # WOFF2 conversion
                if "woff2" in output_formats or output_formats == "all":
                    woff2_path = Path(OUTPUT_DIR) / f"{font_name}.woff2"
                    result = subprocess.run(
                        ["woff2_compress", str(font_path)],
                        capture_output=True
                    )
                    
                    temp_woff2 = Path(f"{font_name}.woff2")
                    if result.returncode == 0 and temp_woff2.exists():
                        temp_woff2.rename(woff2_path)
                        converted_formats.append("woff2")
                        css_sources.append(f"url('./{font_name}.woff2') format('woff2')")
                        print(f"  ✓ WOFF2 created")
                
                # WOFF conversion
                if "woff" in output_formats or output_formats == "all":
                    woff_path = Path(OUTPUT_DIR) / f"{font_name}.woff"
                    result = subprocess.run(
                        ["pyftconvert", str(font_path), "--flavor=woff", f"--output={woff_path}"],
                        capture_output=True
                    )
                    if result.returncode == 0 and woff_path.exists():
                        converted_formats.append("woff")
                        css_sources.append(f"url('./{font_name}.woff') format('woff')")
                        print(f"  ✓ WOFF created")
                
                # TTF handling
                if "ttf" in output_formats or output_formats == "all":
                    ttf_path = Path(OUTPUT_DIR) / f"{font_name}.ttf"
                    
                    if original_ext == "ttf":
                        import shutil
                        shutil.copy2(font_path, ttf_path)
                        converted_formats.append("ttf")
                        css_sources.append(f"url('./{font_name}.ttf') format('truetype')")
                        print(f"  ✓ TTF copied")
                    elif original_ext == "otf":
                        result = subprocess.run(
                            ["pyftconvert", str(font_path), "--flavor=ttf", f"--output={ttf_path}"],
                            capture_output=True
                        )
                        if result.returncode == 0 and ttf_path.exists():
                            converted_formats.append("ttf")
                            css_sources.append(f"url('./{font_name}.ttf') format('truetype')")
                            print(f"  ✓ TTF converted from OTF")
                    else:
                        result = subprocess.run(
                            ["pyftconvert", str(font_path), "--flavor=ttf", f"--output={ttf_path}"],
                            capture_output=True
                        )
                        if result.returncode == 0 and ttf_path.exists():
                            converted_formats.append("ttf")
                            css_sources.append(f"url('./{font_name}.ttf') format('truetype')")
                            print(f"  ✓ TTF created")
                
                # Keep original OTF
                if original_ext == "otf" and output_formats == "all":
                    import shutil
                    otf_path = Path(OUTPUT_DIR) / f"{font_name}.otf"
                    shutil.copy2(font_path, otf_path)
                    converted_formats.append("otf")
                    css_sources.append(f"url('./{font_name}.otf') format('opentype')")
                    print(f"  ✓ OTF copied")
                
                # Generate CSS
                if css_sources:
                    css_content = f"""/* Font: {font_name} */
/* Original: {font_path_obj.name} */
/* Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} */

@font-face {{
  font-family: '{font_name}';
  font-style: normal;
  font-weight: 400;
  font-display: swap;
  src: {',\n       '.join(css_sources)};
}}

/* Utility classes */
.{font_name} {{
  font-family: '{font_name}', sans-serif;
}}

.{font_name}-bold {{
  font-family: '{font_name}', sans-serif;
  font-weight: bold;
}}

.{font_name}-italic {{
  font-family: '{font_name}', sans-serif;
  font-style: italic;
}}
"""
                    css_path = Path(OUTPUT_DIR) / f"{font_name}.css"
                    css_path.write_text(css_content)
                    print(f"  ✓ CSS generated")
                
                font_info["converted_formats"] = converted_formats
                metadata["fonts"].append(font_info)
                
                if converted_formats:
                    conversion_stats["success"] += 1
                    for fmt in converted_formats:
                        conversion_stats["formats"][fmt] = conversion_stats["formats"].get(fmt, 0) + 1
                    print(f"✓ {font_name}: {', '.join(converted_formats)}\n")
                else:
                    conversion_stats["failed"] += 1
                    print(f"✗ {font_name}: No formats converted\n")
                    
            except Exception as e:
                print(f"✗ Error converting {font_name}: {e}\n")
                conversion_stats["failed"] += 1
        
        # Save metadata
        metadata_path = Path(OUTPUT_DIR) / "metadata.json"
        with open(metadata_path, "w") as f:
            json.dump(metadata, f, indent=2)
        
        # Save stats for summary
        with open("conversion_stats.json", "w") as f:
            json.dump(conversion_stats, f)
        
        print(f"\n{'='*50}")
        print(f"Conversion Summary:")
        print(f"  Successful: {conversion_stats['success']}")
        print(f"  Failed: {conversion_stats['failed']}")
        print(f"  Formats generated: {conversion_stats['formats']}")
        print(f"{'='*50}")
        PYTHON_SCRIPT

    - name: List converted files
      run: |
        echo "📁 Converted files in $OUTPUT_DIR:"
        find $OUTPUT_DIR -type f \( -name "*.css" -o -name "*.woff2" -o -name "*.woff" -o -name "*.ttf" -o -name "*.otf" \) | sort
        echo ""
        echo "📊 File sizes:"
        find $OUTPUT_DIR -type f -exec du -h {} \; | sort -h

    - name: Upload fonts as artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}-${{ github.run_id }}
        path: ${{ env.OUTPUT_DIR }}/
        retention-days: 30
        if-no-files-found: warn

    - name: Generate summary
      if: always()
      run: |
        echo "## 🎨 Font Conversion Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Display stats
        if [ -f "conversion_stats.json" ]; then
          SUCCESS=$(python -c "import json; print(json.load(open('conversion_stats.json'))['success'])")
          FAILED=$(python -c "import json; print(json.load(open('conversion_stats.json'))['failed'])")
          
          echo "### 📊 Conversion Statistics" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Successful: **$SUCCESS**" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ Failed: **$FAILED**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "### 📥 Input Sources" >> $GITHUB_STEP_SUMMARY
        if [ "${{ github.event.inputs.font_url }}" != "" ]; then
          echo "- **URL Import:** \`${{ github.event.inputs.font_url }}\`" >> $GITHUB_STEP_SUMMARY
        fi
        if [ "${{ steps.find-local-fonts.outputs.font_count }}" != "0" ]; then
          echo "- **Local Files:** ${{ steps.find-local-fonts.outputs.font_count }} files" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 📦 Download Artifact" >> $GITHUB_STEP_SUMMARY
        echo "**Artifact:** \`${{ env.ARTIFACT_NAME }}-${{ github.run_id }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -d "$OUTPUT_DIR" ]; then
          echo "### 📄 Converted Files" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          for css_file in $OUTPUT_DIR/*.css; do
            if [ -f "$css_file" ]; then
              FONT_NAME=$(basename "$css_file" .css)
              echo "#### 🔤 $FONT_NAME" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              
              for format in woff2 woff ttf otf; do
                if [ -f "$OUTPUT_DIR/${FONT_NAME}.$format" ]; then
                  SIZE=$(du -h "$OUTPUT_DIR/${FONT_NAME}.$format" | cut -f1)
                  echo "- \`${FONT_NAME}.$format\` - $SIZE" >> $GITHUB_STEP_SUMMARY
                fi
              done
              echo "- \`${FONT_NAME}.css\` - CSS stylesheet" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          done
        fi
        
        echo "### 🚀 Usage" >> $GITHUB_STEP_SUMMARY
        echo '```html' >> $GITHUB_STEP_SUMMARY
        echo '<link rel="stylesheet" href="path/to/font-name.css">' >> $GITHUB_STEP_SUMMARY
        echo '<p class="font-name">Your text here</p>' >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
