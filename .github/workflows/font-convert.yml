name: Font Conversion with Artifact

on:
  push:
    branches: [ main, master ]
    paths:
      - 'fonts/**'
      - '.github/workflows/font-convert.yml'
  workflow_dispatch:
    inputs:
      font_url:
        description: 'Font URL to download and convert'
        required: false
      font_path:
        description: 'Local font file path'
        required: false
        default: 'fonts/input/'
      output_formats:
        description: 'Output formats'
        required: true
        default: 'woff2,woff'
        type: choice
        options:
        - woff2,woff
        - woff2
        - woff
        - all

env:
  OUTPUT_DIR: fonts-output
  ARTIFACT_NAME: converted-fonts

jobs:
  convert-fonts:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python and tools
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y woff2
        pip install fonttools requests

    - name: Create output directory
      run: mkdir -p $OUTPUT_DIR

    - name: Download font from URL
      if: github.event.inputs.font_url != ''
      id: download-font
      run: |
        FONT_URL="${{ github.event.inputs.font_url }}"
        FILENAME=$(basename "$FONT_URL")
        echo "Downloading font from: $FONT_URL"
        
        # Download font file
        curl -L -o "$OUTPUT_DIR/downloaded_font" "$FONT_URL"
        
        # Get file extension and rename
        EXTENSION="${FILENAME##*.}"
        if [ -f "$OUTPUT_DIR/downloaded_font" ]; then
          mv "$OUTPUT_DIR/downloaded_font" "$OUTPUT_DIR/imported_font.$EXTENSION"
          echo "downloaded_font_path=$OUTPUT_DIR/imported_font.$EXTENSION" >> $GITHUB_OUTPUT
          echo "font_name=imported_font" >> $GITHUB_OUTPUT
        fi

    - name: Find local font files
      if: github.event.inputs.font_url == '' || github.event.inputs.font_path != 'fonts/input/'
      id: find-local-fonts
      run: |
        if [ "${{ github.event.inputs.font_path }}" != "" ] && [ "${{ github.event.inputs.font_path }}" != "fonts/input/" ]; then
          SEARCH_PATH="${{ github.event.inputs.font_path }}"
        else
          SEARCH_PATH="fonts/"
        fi
        
        if [ -d "$SEARCH_PATH" ] || [ -f "$SEARCH_PATH" ]; then
          if [ -f "$SEARCH_PATH" ]; then
            # Single file
            echo "$SEARCH_PATH" > font_list.txt
          else
            # Directory
            find "$SEARCH_PATH" -name "*.ttf" -o -name "*.otf" -o -name "*.woff" -o -name "*.woff2" | grep -v "$OUTPUT_DIR" > font_list.txt
          fi
          
          FONT_COUNT=$(wc -l < font_list.txt | tr -d ' ')
          echo "font_count=$FONT_COUNT" >> $GITHUB_OUTPUT
          echo "Found $FONT_COUNT font files"
        else
          echo "font_count=0" >> $GITHUB_OUTPUT
          echo "No font files found in $SEARCH_PATH"
        fi

    - name: Convert fonts
      id: convert-fonts
      run: |
        # Use downloaded font if available
        if [ -f "${{ steps.download-font.outputs.downloaded_font_path }}" ]; then
          echo "Processing downloaded font..."
          FONT_FILES="${{ steps.download-font.outputs.downloaded_font_path }}"
          FONT_NAME="${{ steps.download-font.outputs.font_name }}"
        else
          # Use local fonts
          if [ ! -f font_list.txt ] || [ ! -s font_list.txt ]; then
            echo "No font files found to convert"
            exit 0
          fi
          FONT_FILES=$(cat font_list.txt | tr '\n' ' ')
        fi
        
        # Create metadata file
        cat << EOF > $OUTPUT_DIR/metadata.json
        {
          "conversion_date": "$(date -Iseconds)",
          "repository": "${{ github.repository }}",
          "run_id": "${{ github.run_id }}",
          "fonts": [
        EOF
        
        FIRST_FONT=true
        for font_path in $FONT_FILES; do
          if [ -f "$font_path" ]; then
            if [ -z "$FONT_NAME" ]; then
              FONT_NAME=$(basename "$font_path" | cut -f 1 -d '.')
            fi
            echo "Converting: $FONT_NAME from $font_path"
            
            # Add to metadata
            if [ "$FIRST_FONT" = false ]; then
              echo "," >> $OUTPUT_DIR/metadata.json
            fi
            cat << EOF >> $OUTPUT_DIR/metadata.json
            {
              "name": "$FONT_NAME",
              "original_file": "$(basename $font_path)",
              "formats": [],
              "cdn_links": {}
            }
EOF
            FIRST_FONT=false
            
            # Convert to different formats
            if [[ "${{ github.event.inputs.output_formats }}" =~ "woff2" ]] || [[ "${{ github.event.inputs.output_formats }}" == "all" ]]; then
              echo "Converting to WOFF2..."
              woff2_compress "$font_path" 2>/dev/null && mv "${FONT_NAME}.woff2" "$OUTPUT_DIR/" || echo "WOFF2 conversion failed or skipped"
            fi
            
            if [[ "${{ github.event.inputs.output_formats }}" =~ "woff" ]] || [[ "${{ github.event.inputs.output_formats }}" == "all" ]]; then
              echo "Converting to WOFF..."
              pyftconvert "$font_path" --flavor=woff --output="$OUTPUT_DIR/${FONT_NAME}.woff" 2>/dev/null || echo "WOFF conversion failed"
            fi
            
            if [[ "${{ github.event.inputs.output_formats }}" =~ "ttf" ]] || [[ "${{ github.event.inputs.output_formats }}" == "all" ]]; then
              if [[ "$font_path" == *.otf ]]; then
                echo "Converting OTF to TTF..."
                pyftconvert "$font_path" --flavor=ttf --output="$OUTPUT_DIR/${FONT_NAME}.ttf" 2>/dev/null || echo "TTF conversion failed"
              else
                echo "Copying TTF..."
                cp "$font_path" "$OUTPUT_DIR/${FONT_NAME}.ttf"
              fi
            fi
            
            # Generate CSS file
            cat << EOF > "$OUTPUT_DIR/${FONT_NAME}.css"
/* Font generated by GitHub Actions */
@font-face {
  font-family: '$FONT_NAME';
  font-style: normal;
  font-weight: 400;
  font-display: swap;
  src: 
EOF
            
            if [ -f "$OUTPUT_DIR/${FONT_NAME}.woff2" ]; then
              echo "    url('./${FONT_NAME}.woff2') format('woff2')," >> "$OUTPUT_DIR/${FONT_NAME}.css"
            fi
            if [ -f "$OUTPUT_DIR/${FONT_NAME}.woff" ]; then
              echo "    url('./${FONT_NAME}.woff') format('woff')," >> "$OUTPUT_DIR/${FONT_NAME}.css"
            fi
            if [ -f "$OUTPUT_DIR/${FONT_NAME}.ttf" ]; then
              echo "    url('./${FONT_NAME}.ttf') format('truetype');" >> "$OUTPUT_DIR/${FONT_NAME}.css"
            fi
            
            # Remove trailing comma from last entry
            sed -i '$ s/,$/;/' "$OUTPUT_DIR/${FONT_NAME}.css"
            
            cat << EOF >> "$OUTPUT_DIR/${FONT_NAME}.css"
}

.${FONT_NAME}-text {
  font-family: '$FONT_NAME', sans-serif;
}
EOF
            
            # Reset font name for next iteration
            FONT_NAME=""
          fi
        done
        
        # Close metadata array
        echo "  ]" >> $OUTPUT_DIR/metadata.json
        echo "}" >> $OUTPUT_DIR/metadata.json

    - name: Upload fonts as artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}-${{ github.run_id }}
        path: ${{ env.OUTPUT_DIR }}/
        retention-days: 30

    - name: Generate summary with download links
      run: |
        echo "## 🎨 Font Conversion Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📁 Artifact Download" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Download the converted fonts from the **Artifacts** section of this workflow run." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Artifact Name:** \`${{ env.ARTIFACT_NAME }}-${{ github.run_id }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # List converted files
        if [ -d "$OUTPUT_DIR" ]; then
          echo "### 📄 Converted Files:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          for file in $OUTPUT_DIR/*; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              size=$(du -h "$file" | cut -f1)
              echo "- \`$filename\` ($size)" >> $GITHUB_STEP_SUMMARY
            fi
          done
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Usage Instructions" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "1. Download the artifact from this workflow run" >> $GITHUB_STEP_SUMMARY
        echo "2. Extract the files to your project" >> $GITHUB_STEP_SUMMARY
        echo "3. Include the CSS file in your HTML:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`html" >> $GITHUB_STEP_SUMMARY
        echo "<link rel=\"stylesheet\" href=\"path/to/font-name.css\">" >> $GITHUB_STEP_SUMMARY
        echo "<div class=\"font-name-text\">Your text here</div>" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

    - name: Create release (optional)
      if: github.event_name == 'workflow_dispatch'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: fonts-${{ github.run_id }}
        name: "Converted Fonts ${{ github.run_id }}"
        body: "Automatically converted font files"
        files: ${{ env.OUTPUT_DIR }}/*
        draft: false
        prerelease: false